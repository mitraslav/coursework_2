from src.vacancy import Vacancy


def test_vacancy_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    print("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏...")

    vacancy = Vacancy(
        title="Python Developer",
        url="https://hh.ru/vacancy/123",
        salary_from=100000,
        salary_to=150000,
        currency="RUR",
        description="–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ backend –Ω–∞ Python",
        requirements="–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã 3+ –≥–æ–¥–∞, Django, Flask",
        employer="Tech Company"
    )

    assert vacancy.title == "Python Developer"
    assert vacancy.url == "https://hh.ru/vacancy/123"
    assert vacancy.salary_from == 100000
    assert vacancy.salary_to == 150000
    assert vacancy.currency == "RUR"
    assert vacancy.description == "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ backend –Ω–∞ Python"
    assert vacancy.requirements == "–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã 3+ –≥–æ–¥–∞, Django, Flask"
    assert vacancy.employer == "Tech Company"

    print("‚úì –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_vacancy_creation_minimal():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")

    vacancy = Vacancy(
        title="Java Developer",
        url="https://hh.ru/vacancy/456"
    )

    assert vacancy.title == "Java Developer"
    assert vacancy.url == "https://hh.ru/vacancy/456"
    assert vacancy.salary_from == 0
    assert vacancy.salary_to == 0
    assert vacancy.currency == ""
    assert vacancy.description == ""
    assert vacancy.requirements == ""
    assert vacancy.employer == ""

    print("‚úì –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_vacancy_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")

    # –¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    try:
        Vacancy(title="", url="https://hh.ru/vacancy/123")
        assert False, "–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
    except ValueError as e:
        assert "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π" in str(e)

    # –¢–µ—Å—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ URL
    try:
        Vacancy(title="Developer", url="invalid_url")
        assert False, "–û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL"
    except ValueError as e:
        assert "URL –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://" in str(e)

    # –¢–µ—Å—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
    vacancy = Vacancy(
        title="Developer",
        url="https://hh.ru/vacancy/123",
        salary_from=-1000,
        salary_to=-500
    )
    assert vacancy.salary_from == 0
    assert vacancy.salary_to == 0

    # –¢–µ—Å—Ç None –∑–∞—Ä–ø–ª–∞—Ç—ã
    vacancy = Vacancy(
        title="Developer",
        url="https://hh.ru/vacancy/123",
        salary_from=None,
        salary_to=None
    )
    assert vacancy.salary_from == 0
    assert vacancy.salary_to == 0

    print("‚úì –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_avg_salary():
    """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã"""
    print("üß™ –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã...")

    # –û–±–µ –∑–∞—Ä–ø–ª–∞—Ç—ã —É–∫–∞–∑–∞–Ω—ã
    vacancy1 = Vacancy(
        title="Developer 1",
        url="https://hh.ru/vacancy/1",
        salary_from=100000,
        salary_to=150000
    )
    assert vacancy1.get_avg_salary() == 125000

    # –¢–æ–ª—å–∫–æ –∑–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç
    vacancy2 = Vacancy(
        title="Developer 2",
        url="https://hh.ru/vacancy/2",
        salary_from=120000,
        salary_to=None
    )
    assert vacancy2.get_avg_salary() == 120000

    # –¢–æ–ª—å–∫–æ –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ
    vacancy3 = Vacancy(
        title="Developer 3",
        url="https://hh.ru/vacancy/3",
        salary_from=None,
        salary_to=180000
    )
    assert vacancy3.get_avg_salary() == 180000

    # –ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
    vacancy4 = Vacancy(
        title="Developer 4",
        url="https://hh.ru/vacancy/4"
    )
    assert vacancy4.get_avg_salary() == 0.0

    print("‚úì –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –∑–∞—Ä–ø–ª–∞—Ç—ã —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_comparison_operators():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")

    vacancy_low = Vacancy(
        title="Junior Developer",
        url="https://hh.ru/vacancy/1",
        salary_from=50000,
        salary_to=80000
    )

    vacancy_medium = Vacancy(
        title="Middle Developer",
        url="https://hh.ru/vacancy/2",
        salary_from=100000,
        salary_to=150000
    )

    vacancy_high = Vacancy(
        title="Senior Developer",
        url="https://hh.ru/vacancy/3",
        salary_from=200000,
        salary_to=250000
    )

    vacancy_same = Vacancy(
        title="Another Middle",
        url="https://hh.ru/vacancy/4",
        salary_from=100000,
        salary_to=150000
    )

    # –¢–µ—Å—Ç —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
    assert vacancy_medium == vacancy_same
    assert not vacancy_low == vacancy_high

    # –¢–µ—Å—Ç –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤–∞
    assert vacancy_low != vacancy_high

    # –¢–µ—Å—Ç –º–µ–Ω—å—à–µ
    assert vacancy_low < vacancy_medium
    assert vacancy_low < vacancy_high
    assert not vacancy_high < vacancy_low

    # –¢–µ—Å—Ç –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ
    assert vacancy_low <= vacancy_medium
    assert vacancy_medium <= vacancy_same
    assert not vacancy_high <= vacancy_low

    # –¢–µ—Å—Ç –±–æ–ª—å—à–µ
    assert vacancy_high > vacancy_medium
    assert vacancy_high > vacancy_low
    assert not vacancy_low > vacancy_high

    # –¢–µ—Å—Ç –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ
    assert vacancy_high >= vacancy_medium
    assert vacancy_medium >= vacancy_same
    assert not vacancy_low >= vacancy_high

    print("‚úì –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")


def test_string_representation():
    """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è...")

    # –í–∞–∫–∞–Ω—Å–∏—è —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π
    vacancy_with_salary = Vacancy(
        title="Python Developer",
        url="https://hh.ru/vacancy/123",
        salary_from=100000,
        salary_to=150000,
        currency="RUR",
        employer="Tech Corp"
    )

    string_repr = str(vacancy_with_salary)
    assert "Python Developer" in string_repr
    assert "Tech Corp" in string_repr
    assert "–æ—Ç 100000" in string_repr
    assert "–¥–æ 150000" in string_repr
    assert "RUR" in string_repr
    assert "https://hh.ru/vacancy/123" in string_repr

    # –í–∞–∫–∞–Ω—Å–∏—è –±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã
    vacancy_no_salary = Vacancy(
        title="Java Developer",
        url="https://hh.ru/vacancy/456",
        employer="Bank Inc"
    )

    string_repr = str(vacancy_no_salary)
    assert "Java Developer" in string_repr
    assert "Bank Inc" in string_repr
    assert "–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞" in string_repr
    assert "https://hh.ru/vacancy/456" in string_repr

    print("‚úì –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_to_dict():
    """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å"""
    print("üß™ –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å...")

    vacancy = Vacancy(
        title="Python Developer",
        url="https://hh.ru/vacancy/123",
        salary_from=100000,
        salary_to=150000,
        currency="RUR",
        description="Backend development",
        requirements="Python 3+",
        employer="Tech Company"
    )

    vacancy_dict = vacancy.to_dict()

    assert vacancy_dict['title'] == "Python Developer"
    assert vacancy_dict['url'] == "https://hh.ru/vacancy/123"
    assert vacancy_dict['salary_from'] == 100000
    assert vacancy_dict['salary_to'] == 150000
    assert vacancy_dict['currency'] == "RUR"
    assert vacancy_dict['description'] == "Backend development"
    assert vacancy_dict['requirements'] == "Python 3+"
    assert vacancy_dict['employer'] == "Tech Company"

    print("‚úì –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_from_dict():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    print("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è...")

    vacancy_data = {
        'title': 'Data Scientist',
        'url': 'https://hh.ru/vacancy/789',
        'salary_from': 150000,
        'salary_to': 200000,
        'currency': 'RUR',
        'description': 'ML development',
        'requirements': 'Python, ML, SQL',
        'employer': 'AI Company'
    }

    vacancy = Vacancy.from_dict(vacancy_data)

    assert vacancy.title == "Data Scientist"
    assert vacancy.url == "https://hh.ru/vacancy/789"
    assert vacancy.salary_from == 150000
    assert vacancy.salary_to == 200000
    assert vacancy.currency == "RUR"
    assert vacancy.description == "ML development"
    assert vacancy.requirements == "Python, ML, SQL"
    assert vacancy.employer == "AI Company"

    print("‚úì –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_from_dict_minimal():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üß™ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")

    vacancy_data = {
        'title': 'Developer',
        'url': 'https://hh.ru/vacancy/111'
    }

    vacancy = Vacancy.from_dict(vacancy_data)

    assert vacancy.title == "Developer"
    assert vacancy.url == "https://hh.ru/vacancy/111"
    assert vacancy.salary_from == 0
    assert vacancy.salary_to == 0
    assert vacancy.currency == ""
    assert vacancy.description == ""
    assert vacancy.requirements == ""
    assert vacancy.employer == ""

    print("‚úì –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_cast_to_object_list():
    """–¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π –≤ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤...")

    vacancies_data = [
        {
            'name': 'Python Developer',
            'alternate_url': 'https://hh.ru/vacancy/1',
            'salary': {'from': 100000, 'to': 150000, 'currency': 'RUR'},
            'snippet': {'responsibility': 'Backend development', 'requirement': 'Python 3+'},
            'employer': {'name': 'Tech Company'}
        },
        {
            'name': 'Java Developer',
            'alternate_url': 'https://hh.ru/vacancy/2',
            'salary': None,
            'snippet': {'responsibility': '', 'requirement': ''},
            'employer': {'name': 'Bank Corp'}
        },
        {
            'name': 'Data Scientist',
            'alternate_url': 'https://hh.ru/vacancy/3',
            'salary': {'from': None, 'to': 200000, 'currency': 'RUR'},
            'snippet': {'responsibility': 'ML models', 'requirement': 'Python, SQL'},
            'employer': {'name': 'AI Labs'}
        }
    ]

    vacancies = Vacancy.cast_to_object_list(vacancies_data)

    assert len(vacancies) == 3

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    assert vacancies[0].title == "Python Developer"
    assert vacancies[0].url == "https://hh.ru/vacancy/1"
    assert vacancies[0].salary_from == 100000
    assert vacancies[0].salary_to == 150000
    assert vacancies[0].currency == "RUR"
    assert vacancies[0].description == "Backend development"
    assert vacancies[0].requirements == "Python 3+"
    assert vacancies[0].employer == "Tech Company"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ç–æ—Ä—É—é –≤–∞–∫–∞–Ω—Å–∏—é (–±–µ–∑ –∑–∞—Ä–ø–ª–∞—Ç—ã)
    assert vacancies[1].title == "Java Developer"
    assert vacancies[1].url == "https://hh.ru/vacancy/2"
    assert vacancies[1].salary_from == 0
    assert vacancies[1].salary_to == 0
    assert vacancies[1].currency == ""
    assert vacancies[1].employer == "Bank Corp"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ—Ç—å—é –≤–∞–∫–∞–Ω—Å–∏—é (—Ç–æ–ª—å–∫–æ –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ)
    assert vacancies[2].title == "Data Scientist"
    assert vacancies[2].url == "https://hh.ru/vacancy/3"
    assert vacancies[2].salary_from == 0
    assert vacancies[2].salary_to == 200000
    assert vacancies[2].currency == "RUR"
    assert vacancies[2].description == "ML models"
    assert vacancies[2].requirements == "Python, SQL"
    assert vacancies[2].employer == "AI Labs"

    print("‚úì –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç")


def test_properties():
    """–¢–µ—Å—Ç —Å–≤–æ–π—Å—Ç–≤ (properties)"""
    print("üß™ –¢–µ—Å—Ç —Å–≤–æ–π—Å—Ç–≤ (properties)...")

    vacancy = Vacancy(
        title="Python Developer",
        url="https://hh.ru/vacancy/123",
        salary_from=100000,
        salary_to=150000,
        currency="RUR",
        description="Test description",
        requirements="Test requirements",
        employer="Test Company"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
    assert vacancy.title == "Python Developer"
    assert vacancy.url == "https://hh.ru/vacancy/123"
    assert vacancy.salary_from == 100000
    assert vacancy.salary_to == 150000
    assert vacancy.currency == "RUR"
    assert vacancy.description == "Test description"
    assert vacancy.requirements == "Test requirements"
    assert vacancy.employer == "Test Company"

    print("‚úì –°–≤–æ–π—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞ Vacancy\n")

    tests = [
        test_vacancy_creation,
        test_vacancy_creation_minimal,
        test_vacancy_validation,
        test_avg_salary,
        test_comparison_operators,
        test_string_representation,
        test_to_dict,
        test_from_dict,
        test_from_dict_minimal,
        test_cast_to_object_list,
        test_properties,
    ]

    failed_tests = []

    for test_func in tests:
        try:
            test_func()
            print(f"‚úÖ {test_func.__name__} - –ü–†–û–ô–î–ï–ù\n")
        except Exception as e:
            print(f"‚ùå {test_func.__name__} - –ü–†–û–í–ê–õ–ï–ù: {e}\n")
            failed_tests.append(test_func.__name__)

    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("=" * 50)
    if failed_tests:
        print(f"‚ùå –ü–†–û–í–ê–õ–ï–ù–û: {len(failed_tests)} —Ç–µ—Å—Ç–æ–≤")
        for test_name in failed_tests:
            print(f"   - {test_name}")
    else:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
    print("=" * 50)


if __name__ == "__main__":
    run_all_tests()